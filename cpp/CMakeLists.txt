cmake_minimum_required(VERSION 3.10)

if(!$ENV{JAVA_HOME})
    message(FATAL_ERROR "JAVA_HOME is not found. Please make sure you have JDK 8 or 11 installed properly.")
endif()

if(DEFINED V8_DIR AND DEFINED NODE_DIR)
    message(FATAL_ERROR "V8_DIR and NODE_DIR cannot be both defined.")
endif()

if((NOT DEFINED V8_DIR) AND (NOT DEFINED NODE_DIR))
    message(FATAL_ERROR "Either V8_DIR or NODE_DIR needs to be defined.")
endif()

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "limited configs" FORCE)

# CMP0091 must be set before first project().
# @see: https://cmake.org/cmake/help/latest/prop_tgt/MSVC_RUNTIME_LIBRARY.html
if (POLICY CMP0091)
    cmake_policy(SET CMP0091 NEW)
endif()

project(Javet)
aux_source_directory("jni" sourceFiles)

set(includeDirs $ENV{JAVA_HOME}/include)
set(JAVET_TYPE "unknown")

if(DEFINED V8_DIR)
    list(APPEND includeDirs
        ${V8_DIR}/include)
    add_library(v8_monolith STATIC IMPORTED)
    set(JAVET_TYPE "v8")
endif()

if(DEFINED NODE_DIR)
    list(APPEND includeDirs
        ${NODE_DIR}/src
        ${NODE_DIR}/deps/uv/include
        ${NODE_DIR}/deps/v8/include)
    if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
        add_library(brotli STATIC IMPORTED)
        add_library(cares STATIC IMPORTED)
        add_library(histogram STATIC IMPORTED)
        add_library(icudata STATIC IMPORTED)
        add_library(icui18n STATIC IMPORTED)
        add_library(icutools STATIC IMPORTED)
        add_library(icuucx STATIC IMPORTED)
        add_library(libnode STATIC IMPORTED)
        add_library(libuv STATIC IMPORTED)
        add_library(llhttp STATIC IMPORTED)
        add_library(nghttp2 STATIC IMPORTED)
        add_library(openssl STATIC IMPORTED)
        add_library(torque_base STATIC IMPORTED)
        add_library(uvwasi STATIC IMPORTED)
        add_library(v8_base_without_compiler STATIC IMPORTED)
        add_library(v8_compiler STATIC IMPORTED)
        add_library(v8_init STATIC IMPORTED)
        add_library(v8_initializers STATIC IMPORTED)
        add_library(v8_libbase STATIC IMPORTED)
        add_library(v8_libplatform STATIC IMPORTED)
        add_library(v8_libsampler STATIC IMPORTED)
        add_library(v8_snapshot STATIC IMPORTED)
        add_library(v8_zlib STATIC IMPORTED)
        add_library(zlib STATIC IMPORTED)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
        add_library(brotli STATIC IMPORTED)
        add_library(cares STATIC IMPORTED)
        add_library(histogram STATIC IMPORTED)
        add_library(llhttp STATIC IMPORTED)
        add_library(nghttp2 STATIC IMPORTED)
        add_library(node STATIC IMPORTED)
        add_library(node_text_start STATIC IMPORTED)
        add_library(openssl STATIC IMPORTED)
        add_library(torque_base STATIC IMPORTED)
        add_library(uv STATIC IMPORTED)
        add_library(uvwasi STATIC IMPORTED)
        add_library(v8_base_without_compiler STATIC IMPORTED)
        add_library(v8_compiler STATIC IMPORTED)
        add_library(v8_init STATIC IMPORTED)
        add_library(v8_initializers STATIC IMPORTED)
        add_library(v8_libbase STATIC IMPORTED)
        add_library(v8_libplatform STATIC IMPORTED)
        add_library(v8_libsampler STATIC IMPORTED)
        add_library(v8_snapshot STATIC IMPORTED)
        add_library(v8_zlib STATIC IMPORTED)
        add_library(zlib STATIC IMPORTED)
    endif()
    add_definitions(-DENABLE_NODE)
    set(JAVET_TYPE "node")
endif()

if(DEFINED ENABLE_LOGGING)
    add_definitions(-DJAVET_INFO -DJAVET_DEBUG -DJAVET_ERROR -DJAVET_TRACE)
endif()

add_library(Javet SHARED ${sourceFiles} "jni/javet.rc")
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    add_definitions(-D_ITERATOR_DEBUG_LEVEL=0)
    list(APPEND includeDirs $ENV{JAVA_HOME}/include/win32)
    set_property(TARGET Javet APPEND_STRING PROPERTY LINK_FLAGS_RELEASE "")
    set_property(TARGET Javet PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    if(DEFINED V8_DIR)
        set_target_properties(v8_monolith PROPERTIES IMPORTED_LOCATION ${V8_DIR}/out.gn/x64.release/obj/v8_monolith.lib)
        target_link_libraries(Javet v8_monolith)
    endif()
    if(DEFINED NODE_DIR)
        set_target_properties(brotli PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/brotli.lib)
        set_target_properties(cares PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/cares.lib)
        set_target_properties(histogram PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/histogram.lib)
        set_target_properties(icudata PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/icudata.lib)
        set_target_properties(icui18n PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/icui18n.lib)
        set_target_properties(icutools PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/icutools.lib)
        set_target_properties(icuucx PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/icuucx.lib)
        set_target_properties(libnode PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/libnode.lib)
        set_target_properties(libuv PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/libuv.lib)
        set_target_properties(llhttp PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/llhttp.lib)
        set_target_properties(nghttp2 PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/nghttp2.lib)
        set_target_properties(openssl PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/openssl.lib)
        set_target_properties(torque_base PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/torque_base.lib)
        set_target_properties(uvwasi PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/uvwasi.lib)
        set_target_properties(v8_base_without_compiler PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_base_without_compiler.lib)
        set_target_properties(v8_compiler PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_compiler.lib)
        set_target_properties(v8_init PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_init.lib)
        set_target_properties(v8_initializers PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_initializers.lib)
        set_target_properties(v8_libbase PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_libbase.lib)
        set_target_properties(v8_libplatform PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_libplatform.lib)
        set_target_properties(v8_libsampler PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_libsampler.lib)
        set_target_properties(v8_snapshot PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_snapshot.lib)
        set_target_properties(v8_zlib PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/v8_zlib.lib)
        set_target_properties(zlib PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/release/lib/zlib.lib)
        set_target_properties(libnode PROPERTIES LINK_FLAGS "/WHOLEARCHIVE:libnode.lib")
        target_link_libraries(Javet brotli cares histogram icudata icui18n icutools icuucx libnode libuv llhttp nghttp2 openssl torque_base uvwasi v8_base_without_compiler v8_compiler v8_init v8_initializers v8_libbase v8_libplatform v8_libsampler v8_snapshot v8_zlib zlib)
    endif()
    set_target_properties(Javet PROPERTIES OUTPUT_NAME "libjavet-${JAVET_TYPE}-windows-x86_64.v.${JAVET_VERSION}")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    list(APPEND includeDirs $ENV{JAVA_HOME}/include/linux)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64 ")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 ")
    if(DEFINED V8_DIR)
        set_target_properties(v8_monolith PROPERTIES IMPORTED_LOCATION ${V8_DIR}/out.gn/x64.release/obj/libv8_monolith.a)
        target_link_libraries(Javet v8_monolith debug "-lrt" optimized "-lrt" "${libgcc}")
    endif()
    if(DEFINED NODE_DIR)
        set_target_properties(brotli PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libbrotli.a)
        set_target_properties(cares PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libcares.a)
        set_target_properties(histogram PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libhistogram.a)
        set_target_properties(llhttp PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libllhttp.a)
        set_target_properties(nghttp2 PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libnghttp2.a)
        set_target_properties(node PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libnode.a)
        set_target_properties(node_text_start PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libnode_text_start.a)
        set_target_properties(openssl PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libopenssl.a)
        set_target_properties(torque_base PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libtorque_base.a)
        set_target_properties(uv PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libuv.a)
        set_target_properties(uvwasi PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libuvwasi.a)
        set_target_properties(v8_base_without_compiler PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_base_without_compiler.a)
        set_target_properties(v8_compiler PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_compiler.a)
        set_target_properties(v8_init PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_init.a)
        set_target_properties(v8_initializers PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_initializers.a)
        set_target_properties(v8_libbase PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_libbase.a)
        set_target_properties(v8_libplatform PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_libplatform.a)
        set_target_properties(v8_libsampler PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_libsampler.a)
        set_target_properties(v8_snapshot PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_snapshot.a)
        set_target_properties(v8_zlib PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libv8_zlib.a)
        set_target_properties(zlib PROPERTIES IMPORTED_LOCATION ${NODE_DIR}/out/Release/libzlib.a)
        set_target_properties(node PROPERTIES LINK_FLAGS "--whole-archive")
        target_link_libraries(Javet brotli cares histogram llhttp nghttp2 node node_text_start openssl torque_base uv uvwasi v8_base_without_compiler v8_compiler v8_init v8_initializers v8_libbase v8_libplatform v8_libsampler v8_snapshot v8_zlib zlib debug "-lrt" optimized "-lrt" "${libgcc}")
    endif()
    set_target_properties(Javet PROPERTIES OUTPUT_NAME "javet-${JAVET_TYPE}-linux-x86_64.v.${JAVET_VERSION}")
else()
    message(FATAL_ERROR "OS that is not either Windows or Linux hasn't been supported yet.")
endif()

include_directories(${includeDirs})
