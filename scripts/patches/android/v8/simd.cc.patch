diff --git a/src/objects/simd.cc b/src/objects/simd.cc
index 3202e51e4f3..7b1de83a58b 100644
--- a/src/objects/simd.cc
+++ b/src/objects/simd.cc
@@ -477,21 +477,6 @@ void Uint8ArrayToHexSlow(const char* bytes, size_t length,
   }
 }
 
-void AtomicUint8ArrayToHexSlow(const char* bytes, size_t length,
-                               DirectHandle<SeqOneByteString> string_output) {
-  int index = 0;
-  // std::atomic_ref<T> must not have a const T, see
-  // https://cplusplus.github.io/LWG/issue3508
-  // we instead provide a mutable input, which is ok since we are only reading
-  // from it.
-  char* mutable_bytes = const_cast<char*>(bytes);
-  for (size_t i = 0; i < length; i++) {
-    uint8_t byte =
-        std::atomic_ref<char>(mutable_bytes[i]).load(std::memory_order_relaxed);
-    PerformNibbleToHexAndWriteIntoStringOutPut(byte, index, string_output);
-    index += 2;
-  }
-}
 
 inline uint16_t ByteToHex(uint8_t byte) {
   const uint16_t correction = (('a' - '0' - 10) << 8) + ('a' - '0' - 10);
@@ -645,11 +630,7 @@ Tagged<Object> Uint8ArrayToHex(const char* bytes, size_t length, bool is_shared,
   }
 #endif
 
-  if (is_shared) {
-    AtomicUint8ArrayToHexSlow(bytes, length, string_output);
-  } else {
     Uint8ArrayToHexSlow(bytes, length, string_output);
-  }
   return *string_output;
 }
 
@@ -1081,12 +1062,7 @@ bool ArrayBufferFromHex(const base::Vector<T>& input_vector, bool is_shared,
   for (uint32_t i = 0; i < input_length; i += 2) {
     result = HandleRemainingHexValues(input_vector, i);
     if (result.has_value()) {
-      if (is_shared) {
-        std::atomic_ref<uint8_t>(buffer[index++])
-            .store(result.value(), std::memory_order_relaxed);
-      } else {
         buffer[index++] = result.value();
-      }
     } else {
       return false;
     }
