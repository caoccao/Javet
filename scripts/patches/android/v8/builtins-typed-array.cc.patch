diff --git a/src/builtins/builtins-typed-array.cc b/src/builtins/builtins-typed-array.cc
index 918cb873481..b2eb2330918 100644
--- a/src/builtins/builtins-typed-array.cc
+++ b/src/builtins/builtins-typed-array.cc
@@ -520,17 +520,10 @@ simdutf::result ArrayBufferSetFromBase64(
     DirectHandle<JSTypedArray> typed_array, size_t& output_length) {
   output_length = array_length;
   simdutf::result simd_result;
-  if (typed_array->buffer()->is_shared()) {
-    simd_result = simdutf::atomic_base64_to_binary_safe(
-        reinterpret_cast<const T>(input_vector), input_length,
-        reinterpret_cast<char*>(typed_array->DataPtr()), output_length,
-        alphabet, last_chunk_handling, /*decode_up_to_bad_char*/ true);
-  } else {
     simd_result = simdutf::base64_to_binary_safe(
         reinterpret_cast<const T>(input_vector), input_length,
         reinterpret_cast<char*>(typed_array->DataPtr()), output_length,
         alphabet, last_chunk_handling, /*decode_up_to_bad_char*/ true);
-  }
 
   return simd_result;
 }
@@ -833,15 +826,9 @@ BUILTIN(Uint8ArrayPrototypeToBase64) {
     // 11. Return CodePointsToString(outAscii).
 
     size_t simd_result_size;
-    if (uint8array->buffer()->is_shared()) {
-      simd_result_size = simdutf::atomic_binary_to_base64(
-          std::bit_cast<const char*>(uint8array->DataPtr()), length,
-          reinterpret_cast<char*>(output->GetChars(no_gc)), alphabet);
-    } else {
       simd_result_size = simdutf::binary_to_base64(
           std::bit_cast<const char*>(uint8array->DataPtr()), length,
           reinterpret_cast<char*>(output->GetChars(no_gc)), alphabet);
-    }
     DCHECK_EQ(simd_result_size, output_length);
     USE(simd_result_size);
   }
